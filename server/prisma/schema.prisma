generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// <---------- TYPES & ENUMS ---------->

enum UserRole {
  ADMIN
  SELLER
  BUYER
}

enum ProductStatus {
  LIVE
  SOLD
  DELIVERED
}

enum AuctionStatus {
  APPROVED
  PENDING
  REJECTED
}

enum BidStatus {
  OPEN
  CLOSE
}

// <---------- MODELS ---------->

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole  @default(BUYER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sellerProducts   Product[] @relation("SellerProduct")
  auctions         Auction[]
  bids             Bid[]
  buyerReviews     Review[]  @relation("BuyerReview")
  sellerReviewes   Review[]  @relation("SellerReview")
  purchaseProducts Product[] @relation("BuyerPurchaseProducts")

  @@index([firstName], name: "firstName_index")
  @@index([lastName], name: "lastName_index")
}

model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  images      String[]
  minimumBid  Float?
  status      ProductStatus @default(LIVE)
  seller      User          @relation("SellerProduct", fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    String        @db.ObjectId
  buyer       User?         @relation("BuyerPurchaseProducts", fields: [buyerId], references: [id])
  buyerId     String?       @db.ObjectId
  auction     Auction?      @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  auctionId   String?       @db.ObjectId
  bids        Bid[]
  winnerEmail String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([name], name: "productName_index")
}

model Auction {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  name       String        @unique
  startTime  DateTime
  endTime    DateTime
  status     AuctionStatus @default(PENDING)
  isApproved Boolean       @default(false)
  products   Product[]
  creator    User?         @relation(fields: [creatorId], references: [id])
  creatorId  String?       @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([startTime], name: "auctionStartTime_index")
  @@index([endTime], name: "auctionEndTime_index")
}

model Bid {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  maxBid    Float?    @default(0)
  bidStatus BidStatus @default(OPEN)
  buyer     User      @relation(fields: [buyerId], references: [id])
  buyerId   String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  buyer     User     @relation("BuyerReview", fields: [buyerId], references: [id])
  buyerId   String   @db.ObjectId
  seller    User     @relation("SellerReview", fields: [sellerId], references: [id])
  sellerId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
